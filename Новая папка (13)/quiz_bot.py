#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
IslamQuiz - —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç –∏—Å–ª–∞–º —Ç—É—Ä–∞–ª—ã –±—ñ–ª—ñ–º–¥—ñ —Ç–µ–∫—Å–µ—Ä—É–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.
–ë–æ—Ç –∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å“±—Ä–∞“õ—Ç–∞—Ä –∂—ñ–±–µ—Ä–µ–¥—ñ, –∂–∞—É–∞–ø—Ç–∞—Ä–¥—ã “õ–∞–±—ã–ª–¥–∞–π–¥—ã –∂”ô–Ω–µ “±–ø–∞–π–ª–∞—Ä–¥—ã –µ—Å–µ–ø—Ç–µ–π–¥—ñ.
"""

import json
import logging
import random
import datetime
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Union, Any

import pytz
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Poll,
    ChatMemberUpdated,
    ChatMember,
    Message,
    User,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    PollAnswerHandler,
    ChatMemberHandler,
    CallbackQueryHandler,
    AIORateLimiter,
    JobQueue,
)

# –õ–æ–≥–≥–µ—Ä –±–∞–ø—Ç–∞—É
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞–ª–∞—Ä
TOKEN = "YOUR_TOKEN_HERE"  # –ë–æ—Ç—ã“£—ã–∑–¥—ã“£ —Ç–æ–∫–µ–Ω—ñ–Ω –æ—Å—ã–Ω–¥–∞ –æ—Ä–Ω–∞—Ç—ã“£—ã–∑
# –ê—Å—Ç–∞–Ω–∞ —É–∞“õ—ã—Ç –±–µ–ª–¥–µ—É—ñ
TIMEZONE = pytz.timezone("Asia/Almaty")

# –°“±—Ä–∞“õ—Ç–∞—Ä –±–∞–∑–∞—Å—ã–Ω –∂“Ø–∫—Ç–µ—É
def load_questions() -> List[Dict]:
    """–°“±—Ä–∞“õ—Ç–∞—Ä –±–∞–∑–∞—Å—ã–Ω JSON —Ñ–∞–π–ª—ã–Ω–∞–Ω –∂“Ø–∫—Ç–µ—É"""
    with open("questions.json", "r", encoding="utf-8") as file:
        questions = json.load(file)
    return questions

# “∞–ø–∞–π–ª–∞—Ä –±–∞–∑–∞—Å—ã–Ω –∂“Ø–∫—Ç–µ—É –∂”ô–Ω–µ —Å–∞“õ—Ç–∞—É
def load_scores() -> Dict:
    """“∞–ø–∞–π–ª–∞—Ä –±–∞–∑–∞—Å—ã–Ω JSON —Ñ–∞–π–ª—ã–Ω–∞–Ω –∂“Ø–∫—Ç–µ—É"""
    try:
        with open("scores.json", "r", encoding="utf-8") as file:
            scores = json.load(file)
        return scores
    except FileNotFoundError:
        return {}

def save_scores(scores: Dict) -> None:
    """“∞–ø–∞–π–ª–∞—Ä –±–∞–∑–∞—Å—ã–Ω JSON —Ñ–∞–π–ª—ã–Ω–∞ —Å–∞“õ—Ç–∞—É"""
    with open("scores.json", "w", encoding="utf-8") as file:
        json.dump(scores, file, ensure_ascii=False, indent=4)

# –ë–æ—Ç –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ë–æ—Ç –±–∞—Å—Ç–∞—É –∫–æ–º–∞–Ω–¥–∞—Å—ã"""
    user = update.effective_user
    
    welcome_text = (
        f"–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º, {user.first_name}! üåô\n\n"
        f"*IslamQuiz* –±–æ—Ç—ã–Ω–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!\n\n"
        f"–ë“±–ª –±–æ—Ç –∞—Ä“õ—ã–ª—ã –∏—Å–ª–∞–º –¥—ñ–Ω—ñ–Ω—ñ“£ ”ô—Ä —Ç“Ø—Ä–ª—ñ —Å–∞–ª–∞–ª–∞—Ä—ã –±–æ–π—ã–Ω—à–∞ –±—ñ–ª—ñ–º—ñ–Ω—ñ–∑–¥—ñ —Ç–µ–∫—Å–µ—Ä–µ –∞–ª–∞—Å—ã–∑.\n\n"
        f"–ö“Ø–Ω —Å–∞–π—ã–Ω –∂–∞“£–∞ —Å“±—Ä–∞“õ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ. –î“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω—ñ“£—ñ–∑ “Ø—à—ñ–Ω “±–ø–∞–π –∞–ª–∞—Å—ã–∑.\n"
        f"–ê–ø—Ç–∞ —Å–æ“£—ã–Ω–¥–∞ –µ“£ –∫”©–ø “±–ø–∞–π –∂–∏–Ω–∞“ì–∞–Ω–¥–∞—Ä –∞–Ω—ã“õ—Ç–∞–ª–∞–¥—ã!\n\n"
        f"–ë–æ—Ç –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä—ã:\n"
        f"/quiz - –∞—Ä–Ω–∞–π—ã —Å“±—Ä–∞“õ —Å“±—Ä–∞—Ç—É\n"
        f"/score - ”©–∑ “±–ø–∞–π—ã“£—ã–∑–¥—ã —Ç–µ–∫—Å–µ—Ä—É\n"
        f"/leaderboard - –∫”©—à–±–∞—Å—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∫”©—Ä—É\n\n"
        f"–ë“Ø–≥—ñ–Ω–≥—ñ —Å“±—Ä–∞“õ“õ–∞ –¥–∞–π—ã–Ω—Å—ã–∑ –±–∞? üòä"
    )
    
    await update.message.reply_text(welcome_text, parse_mode=ParseMode.MARKDOWN)

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê—Ä–Ω–∞–π—ã —Å“±—Ä–∞“õ —Å“±—Ä–∞—Ç—É –∫–æ–º–∞–Ω–¥–∞—Å—ã"""
    questions = load_questions()
    question_data = random.choice(questions)
    
    await send_quiz(context, update.effective_chat.id, question_data)
    
    await update.message.reply_text(
        "–°—ñ–∑–≥–µ –∞—Ä–Ω–∞–π—ã —Å“±—Ä–∞“õ –¥–∞–π—ã–Ω! –ñ–∞“õ—Å—ã –±–∞“ì—ã“£ –∫–µ–ª—Å—ñ–Ω! üéØ",
        parse_mode=ParseMode.MARKDOWN
    )

async def score(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã–Ω—ã“£ “±–ø–∞–π—ã–Ω –∫”©—Ä—Å–µ—Ç—É"""
    user_id = str(update.effective_user.id)
    scores = load_scores()
    
    user_score = scores.get(user_id, {"total": 0, "weekly": 0})
    
    await update.message.reply_text(
        f"*–°—ñ–∑–¥—ñ“£ “±–ø–∞–π—ã“£—ã–∑:*\n"
        f"–ë–∞—Ä–ª—ã“õ “±–ø–∞–π: {user_score['total']}\n"
        f"–û—Å—ã –∞–ø—Ç–∞–¥–∞“ì—ã “±–ø–∞–π: {user_score['weekly']}",
        parse_mode=ParseMode.MARKDOWN
    )

async def leaderboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö”©—à–±–∞—Å—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∫”©—Ä—Å–µ—Ç—É"""
    scores = load_scores()
    
    # –ê–ø—Ç–∞–ª—ã“õ “±–ø–∞–π–ª–∞—Ä –±–æ–π—ã–Ω—à–∞ —Å“±—Ä—ã–ø—Ç–∞—É
    leaderboard_data = sorted(
        [(user_id, data["weekly"]) for user_id, data in scores.items()],
        key=lambda x: x[1],
        reverse=True
    )[:10]  # –¢–µ–∫ 10 –∫”©—à–±–∞—Å—à—ã
    
    if not leaderboard_data:
        await update.message.reply_text(
            "”ò–∑—ñ—Ä—à–µ –µ—à–∫—ñ–º “±–ø–∞–π –∂–∏–Ω–∞“ì–∞–Ω –∂–æ“õ ü§∑‚Äç‚ôÇÔ∏è",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    text = "*–ê–ø—Ç–∞–ª—ã“õ –∫”©—à–±–∞—Å—à—ã–ª–∞—Ä:*\n\n"
    
    for i, (user_id, points) in enumerate(leaderboard_data, start=1):
        user_info = await context.bot.get_chat(int(user_id))
        username = user_info.first_name
        text += f"{i}. {username}: {points} “±–ø–∞–π\n"
    
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

# –°“±—Ä–∞“õ—Ç–∞—Ä –∂—ñ–±–µ—Ä—É –ª–æ–≥–∏–∫–∞—Å—ã
async def send_quiz(context: ContextTypes.DEFAULT_TYPE, chat_id: int, question_data: Dict) -> None:
    """–°“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É"""
    question = question_data["question"]
    options = question_data["options"]
    correct_option_id = question_data["correct_option_id"]
    
    # –°“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É (—Å–∞—É–∞–ª–Ω–∞–º–∞ —Ç“Ø—Ä—ñ–Ω–¥–µ)
    message = await context.bot.send_poll(
        chat_id=chat_id,
        question=question,
        options=options,
        type=Poll.QUIZ,
        correct_option_id=correct_option_id,
        is_anonymous=False,
        explanation=None,  # –¢“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ–Ω—ñ –∫–µ–π—ñ–Ω –∂—ñ–±–µ—Ä—É
        open_period=86400,  # 24 —Å–∞“ì–∞—Ç (86400 —Å–µ–∫—É–Ω–¥)
        protect_content=True,
    )
    
    # –°“±—Ä–∞“õ—Ç—ã“£ –º”ô–ª—ñ–º–µ—Ç—Ç–µ—Ä—ñ–Ω —Å–∞“õ—Ç–∞—É
    context.bot_data.setdefault("polls", {})[message.poll.id] = {
        "chat_id": chat_id,
        "message_id": message.message_id,
        "question_data": question_data,
    }
    
    # 24 —Å–∞“ì–∞—Ç—Ç–∞–Ω –∫–µ–π—ñ–Ω –¥“±—Ä—ã—Å –∂–∞—É–∞–ø—Ç—ã –∂”ô–Ω–µ —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ–Ω—ñ –∂—ñ–±–µ—Ä—É “Ø—à—ñ–Ω —Ç–∞–ø—Å—ã—Ä–º–∞ “õ–æ—Å—É
    when = datetime.datetime.now(TIMEZONE) + datetime.timedelta(days=1)
    context.job_queue.run_once(
        send_explanation,
        when,
        data={
            "chat_id": chat_id,
            "poll_id": message.poll.id,
        },
        name=f"poll_{message.poll.id}",
    )

async def send_explanation(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–î“±—Ä—ã—Å –∂–∞—É–∞–ø –ø–µ–Ω —Ç“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ–Ω—ñ –∂—ñ–±–µ—Ä—É"""
    job = context.job
    data = job.data
    
    chat_id = data["chat_id"]
    poll_id = data["poll_id"]
    
    poll_data = context.bot_data["polls"].get(poll_id)
    if not poll_data:
        return
    
    question_data = poll_data["question_data"]
    correct_option = question_data["options"][question_data["correct_option_id"]]
    explanation = question_data["explanation"]
    motivation = question_data["motivation"]
    
    text = (
        f"*–î“±—Ä—ã—Å –∂–∞—É–∞–ø:* {correct_option}\n\n"
        f"*–¢“Ø—Å—ñ–Ω–¥—ñ—Ä–º–µ:*\n{explanation}\n\n"
        f"{motivation}"
    )
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode=ParseMode.MARKDOWN,
    )

# –°–∞—É–∞–ª–Ω–∞–º–∞“ì–∞ –∂–∞—É–∞–ø—Ç–∞—Ä–¥—ã ”©“£–¥–µ—É
async def handle_poll_answer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–°–∞—É–∞–ª–Ω–∞–º–∞“ì–∞ –±–µ—Ä—ñ–ª–≥–µ–Ω –∂–∞—É–∞–ø—Ç–∞—Ä–¥—ã ”©“£–¥–µ—É"""
    poll_answer = update.poll_answer
    poll_id = poll_answer.poll_id
    user_id = str(poll_answer.user.id)
    
    poll_data = context.bot_data.get("polls", {}).get(poll_id)
    if not poll_data:
        return
    
    question_data = poll_data["question_data"]
    selected_option = poll_answer.option_ids[0] if poll_answer.option_ids else -1
    correct_option = question_data["correct_option_id"]
    
    # “∞–ø–∞–π–ª–∞—Ä–¥—ã –∂–∞“£–∞—Ä—Ç—É
    scores = load_scores()
    user_data = scores.setdefault(user_id, {"total": 0, "weekly": 0})
    
    # –î“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω—ñ “Ø—à—ñ–Ω “±–ø–∞–π –±–µ—Ä—É
    if selected_option == correct_option:
        user_data["total"] += 1
        user_data["weekly"] += 1
        save_scores(scores)

# –ñ–∞“£–∞ –º“Ø—à–µ–ª–µ—Ä–¥—ñ “õ–∞—Ä—Å—ã –∞–ª—É
async def greet_new_members(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ß–∞—Ç“õ–∞ –∂–∞“£–∞–¥–∞–Ω “õ–æ—Å—ã–ª“ì–∞–Ω –º“Ø—à–µ–ª–µ—Ä–¥—ñ “õ–∞—Ä—Å—ã –∞–ª—É"""
    result = extract_status_change(update.chat_member)
    if result is None:
        return
    
    was_member, is_member = result
    
    if not was_member and is_member:
        # –ñ–∞“£–∞ –º“Ø—à–µ —á–∞—Ç“õ–∞ “õ–æ—Å—ã–ª–¥—ã
        new_member = update.chat_member.new_chat_member.user
        await update.effective_chat.send_message(
            f"–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º, {new_member.first_name}! üåô\n\n"
            f"*IslamQuiz* —á–∞—Ç—ã–Ω–∞ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑!\n"
            f"–ë“Ø–≥—ñ–Ω–≥—ñ —Å“±—Ä–∞“õ“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä—É–≥–µ –¥–∞–π—ã–Ω—Å—ã–∑ –±–∞?",
            parse_mode=ParseMode.MARKDOWN
        )

def extract_status_change(chat_member_update: ChatMemberUpdated) -> Optional[Tuple[bool, bool]]:
    """–ú“Ø—à–µ–Ω—ñ“£ —Å—Ç–∞—Ç—É—Å—ã–Ω—ã“£ ”©–∑–≥–µ—Ä—É—ñ–Ω –∞–Ω—ã“õ—Ç–∞—É –∫”©–º–µ–∫—à—ñ —Ñ—É–Ω–∫—Ü–∏—è—Å—ã"""
    status_change = chat_member_update.difference().get("status")
    old_is_member, new_is_member = chat_member_update.difference().get("is_member", (None, None))
    
    if status_change is None:
        return None
    
    old_status, new_status = status_change
    was_member = old_status in [
        ChatMember.MEMBER,
        ChatMember.OWNER,
        ChatMember.ADMINISTRATOR,
    ] or (old_status == ChatMember.RESTRICTED and old_is_member is True)
    is_member = new_status in [
        ChatMember.MEMBER,
        ChatMember.OWNER,
        ChatMember.ADMINISTRATOR,
    ] or (new_status == ChatMember.RESTRICTED and new_is_member is True)
    
    return was_member, is_member

# –ê–ø—Ç–∞ —Å–∞–π—ã–Ω“ì—ã —Ä–µ–π—Ç–∏–Ω–≥ –∂–∞—Ä–∏—è–ª–∞—É
async def weekly_results(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–ø—Ç–∞ —Å–∞–π—ã–Ω“ì—ã –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ –∂–∞—Ä–∏—è–ª–∞—É"""
    # –ë–∞—Ä–ª—ã“õ —á–∞—Ç—Ç–∞—Ä“ì–∞ –∂—ñ–±–µ—Ä–µ–º—ñ–∑ (—á–∞—Ç—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∂“Ø–π–µ–¥–µ —Å–∞“õ—Ç–∞—É –∫–µ—Ä–µ–∫)
    # –ë“±–ª –∂–µ—Ä–¥–µ –º—ã—Å–∞–ª “Ø—à—ñ–Ω —Ç–µ–∫ –±—ñ—Ä —á–∞—Ç“õ–∞ –∂—ñ–±–µ—Ä—ñ–ª—É–¥–µ
    chat_ids = context.bot_data.get("active_chats", [])
    
    if not chat_ids:
        return
    
    scores = load_scores()
    
    # –ê–ø—Ç–∞–ª—ã“õ “±–ø–∞–π–ª–∞—Ä –±–æ–π—ã–Ω—à–∞ —Å“±—Ä—ã–ø—Ç–∞—É
    leaderboard_data = sorted(
        [(user_id, data["weekly"]) for user_id, data in scores.items()],
        key=lambda x: x[1],
        reverse=True
    )[:5]  # –¢–µ–∫ 5 “Ø–∑–¥—ñ–∫
    
    if not leaderboard_data:
        for chat_id in chat_ids:
            await context.bot.send_message(
                chat_id=chat_id,
                text="–ë“±–ª –∞–ø—Ç–∞–¥–∞ –µ—à–∫—ñ–º “±–ø–∞–π –∂–∏–Ω–∞“ì–∞–Ω –∂–æ“õ üòî",
                parse_mode=ParseMode.MARKDOWN
            )
        return
    
    text = (
        "*–ê–ø—Ç–∞–ª—ã“õ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä!* üèÜ\n\n"
        "–ï“£ –∫”©–ø –¥“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä–≥–µ–Ω “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä:\n\n"
    )
    
    for i, (user_id, points) in enumerate(leaderboard_data, start=1):
        user_info = await context.bot.get_chat(int(user_id))
        username = user_info.first_name
        
        if i == 1:
            text += f"ü•á {username}: {points} “±–ø–∞–π\n"
        elif i == 2:
            text += f"ü•à {username}: {points} “±–ø–∞–π\n"
        elif i == 3:
            text += f"ü•â {username}: {points} “±–ø–∞–π\n"
        else:
            text += f"{i}. {username}: {points} “±–ø–∞–π\n"
    
    text += "\n–ë–∞—Ä–ª—ã“õ “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä“ì–∞ —Ä–∞—Ö–º–µ—Ç! –ñ–∞“£–∞ –∞–ø—Ç–∞–¥–∞ –∂–∞“£–∞ –±—ñ–ª—ñ–º –º–µ–Ω –∂–∞“£–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä –∫“Ø—Ç—ñ“£—ñ–∑–¥–µ—Ä! üìö"
    
    # –ê–ø—Ç–∞–ª—ã“õ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä–¥—ñ –±–∞—Ä–ª—ã“õ —á–∞—Ç“õ–∞ –∂—ñ–±–µ—Ä—É
    for chat_id in chat_ids:
        await context.bot.send_message(
            chat_id=chat_id,
            text=text,
            parse_mode=ParseMode.MARKDOWN
        )
    
    # –ê–ø—Ç–∞–ª—ã“õ “±–ø–∞–π–ª–∞—Ä–¥—ã –Ω”©–ª–¥–µ—É
    for user_id in scores:
        scores[user_id]["weekly"] = 0
    
    save_scores(scores)

# –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É
async def daily_quiz(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å“±—Ä–∞“õ –∂—ñ–±–µ—Ä—É"""
    chat_ids = context.bot_data.get("active_chats", [])
    
    if not chat_ids:
        return
    
    questions = load_questions()
    question_data = random.choice(questions)
    
    intro_text = (
        "*–ë“Ø–≥—ñ–Ω–≥—ñ IslamQuiz —Å“±—Ä–∞“ì—ã!* üåô\n\n"
        "“ö“±—Ä–º–µ—Ç—Ç—ñ “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä, –∂–∞“£–∞ —Å“±—Ä–∞“õ“õ–∞ –¥–∞–π—ã–Ω –±–æ–ª—ã“£—ã–∑–¥–∞—Ä!\n"
        "–î“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä—Å–µ“£—ñ–∑, “±–ø–∞–π –∞–ª–∞—Å—ã–∑. –ñ–∞—É–∞–ø –±–µ—Ä—É —É–∞“õ—ã—Ç—ã: 24 —Å–∞“ì–∞—Ç."
    )
    
    for chat_id in chat_ids:
        await context.bot.send_message(
            chat_id=chat_id,
            text=intro_text,
            parse_mode=ParseMode.MARKDOWN
        )
        await send_quiz(context, chat_id, question_data)

# –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –µ—Å–∫–µ—Ä—Ç—É –∂—ñ–±–µ—Ä—É
async def daily_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –µ—Å–∫–µ—Ä—Ç—É –∂—ñ–±–µ—Ä—É"""
    chat_ids = context.bot_data.get("active_chats", [])
    
    if not chat_ids:
        return
    
    reminder_text = (
        "üåô *IslamQuiz –µ—Å–∫–µ—Ä—Ç—É—ñ*\n\n"
        "“ö“±—Ä–º–µ—Ç—Ç—ñ “õ–∞—Ç—ã—Å—É—à—ã–ª–∞—Ä, –±“Ø–≥—ñ–Ω–≥—ñ —Å“±—Ä–∞“õ“õ–∞ –∂–∞—É–∞–ø –±–µ—Ä—É–¥—ñ “±–º—ã—Ç–ø–∞“£—ã–∑!\n"
        "–ë—ñ–ª—ñ–º - –µ“£ “Ø–ª–∫–µ–Ω –±–∞–π–ª—ã“õ! üìö"
    )
    
    for chat_id in chat_ids:
        await context.bot.send_message(
            chat_id=chat_id,
            text=reminder_text,
            parse_mode=ParseMode.MARKDOWN
        )

# –ß–∞—Ç—Ç—ã —Ç—ñ—Ä–∫–µ—É
async def register_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ß–∞—Ç—Ç—ã –±–µ–ª—Å–µ–Ω–¥—ñ —á–∞—Ç—Ç–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω–µ “õ–æ—Å—É"""
    chat_id = update.effective_chat.id
    active_chats = context.bot_data.setdefault("active_chats", [])
    
    if chat_id not in active_chats:
        active_chats.append(chat_id)
        await update.message.reply_text(
            "–ß–∞—Ç —Å”ô—Ç—Ç—ñ —Ç—ñ—Ä–∫–µ–ª–¥—ñ! –ï–Ω–¥—ñ –∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å“±—Ä–∞“õ—Ç–∞—Ä –æ—Å—ã —á–∞—Ç“õ–∞ –∂—ñ–±–µ—Ä—ñ–ª–µ–¥—ñ.",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            "–ë“±–ª —á–∞—Ç –±“±—Ä—ã–Ω–Ω–∞–Ω —Ç—ñ—Ä–∫–µ–ª–≥–µ–Ω!",
            parse_mode=ParseMode.MARKDOWN
        )

# –ù–µ–≥—ñ–∑–≥—ñ —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    """–ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—É"""
    # –ê–ø–ø–ª–∏–∫–∞—Ü–∏—è –∂–∞—Å–∞—É
    application = Application.builder().token(TOKEN).rate_limiter(AIORateLimiter()).build()
    
    # –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("quiz", quiz))
    application.add_handler(CommandHandler("score", score))
    application.add_handler(CommandHandler("leaderboard", leaderboard))
    application.add_handler(CommandHandler("register", register_chat))
    
    # –°–∞—É–∞–ª–Ω–∞–º–∞ –∂–∞—É–∞–ø—Ç–∞—Ä—ã–Ω ”©“£–¥–µ—É
    application.add_handler(PollAnswerHandler(handle_poll_answer))
    
    # –ñ–∞“£–∞ –º“Ø—à–µ–ª–µ—Ä–¥—ñ “õ–∞—Ä—Å—ã –∞–ª—É
    application.add_handler(ChatMemberHandler(greet_new_members, ChatMemberHandler.CHAT_MEMBER))
    
    # –ö–µ—Å—Ç–µ –±–æ–π—ã–Ω—à–∞ —Ç–∞–ø—Å—ã—Ä–º–∞–ª–∞—Ä–¥—ã “õ–æ—Å—É
    job_queue = application.job_queue
    
    # –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ —Å“±—Ä–∞“õ - —Ç–∞“£“ì—ã 9:00-–¥–µ
    job_queue.run_daily(
        daily_quiz,
        time=datetime.time(hour=9, minute=0, tzinfo=TIMEZONE),
        days=(0, 1, 2, 3, 4, 5, 6),  # –ë–∞—Ä–ª—ã“õ –∫“Ø–Ω–¥–µ—Ä—ñ
    )
    
    # –ö“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ –µ—Å–∫–µ—Ä—Ç—É - –∫–µ—à–∫—ñ 18:00-–¥–µ
    job_queue.run_daily(
        daily_reminder,
        time=datetime.time(hour=18, minute=0, tzinfo=TIMEZONE),
        days=(0, 1, 2, 3, 4, 5, 6),  # –ë–∞—Ä–ª—ã“õ –∫“Ø–Ω–¥–µ—Ä—ñ
    )
    
    # –ê–ø—Ç–∞–ª—ã“õ –Ω”ô—Ç–∏–∂–µ–ª–µ—Ä - –∂–µ–∫—Å–µ–Ω–±—ñ –∫“Ø–Ω—ñ –∫–µ—à–∫—ñ 20:00-–¥–µ
    job_queue.run_daily(
        weekly_results,
        time=datetime.time(hour=20, minute=0, tzinfo=TIMEZONE),
        days=(6,),  # –¢–µ–∫ –∂–µ–∫—Å–µ–Ω–±—ñ
    )
    
    # –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É
    application.run_polling()

if __name__ == "__main__":
    main() 